# -*- coding: utf-8 -*-
"""WineQuality.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18qnyCfpy-UvwtwhDK4chXaj9KSFWeeAe

WINE QUALITY

IMPORT LIBRARY
"""

import pandas as pd

import numpy as np

"""IMPORT DATASET"""

df = pd.read_csv('https://raw.githubusercontent.com/Lorddhaval/Dataset/main/WhiteWineQuality.csv', sep=';')

df.head()

df.info()

df.describe()

df.columns

df.shape

df['quality'].value_counts()

df.groupby('quality').mean()

"""DEFINE X&Y"""

y = df['quality']

x = df[['fixed acidity', 'volatile acidity', 'citric acid', 'residual sugar',
        'chlorides', 'free sulfur dioxide', 'total sulfur dioxide', 'density',
        'pH', 'sulphates', 'alcohol']]

x = df.drop(['quality'], axis=1)

x

y

"""GET X VARIABLES STANDARIZED"""

from sklearn.preprocessing import StandardScaler

ss = StandardScaler()

x = ss.fit_transform(x)

x

"""Get Train Test Split"""

from sklearn.model_selection import train_test_split


x_train, x_test, y_train, y_test, = train_test_split(x,y, test_size = 0.3, stratify = y, random_state=222529)


x_train.shape, x_test.shape, y_train.shape, y_test.shape

"""Get Model Train"""

from sklearn.svm import SVC


svc = SVC()


svc.fit(x_train, y_train)

"""Get Model Prediction"""

y_pred = svc.predict(x_test)


y_pred.shape

"""Get Model Evaluation"""

from sklearn.metrics import confusion_matrix, classification_report


print(confusion_matrix(y_test, y_pred))

print(classification_report(y_test, y_pred))

"""Get Model Re-run with Two Class Created for Wine Quality"""

y = df['quality'].apply(lambda y_value: 1 if y_value>=6 else 0)

y.value_counts()

"""Get Train Test Split


"""

from sklearn.model_selection import train_test_split


x_train, x_test, y_train, y_test = train_test_split(x,y, test_size = 0.3, stratify = y, random_state=222529)


x_train.shape, x_test.shape, y_train.shape, y_test.shape

"""Get Model Prediction"""

y_pred = svc.predict(x_test)


y_pred.shape

"""Get Model Evaluation"""

from sklearn.metrics import confusion_matrix, classification_report


print(confusion_matrix(y_test, y_pred))

print(classification_report(y_test, y_pred))

"""Get Future Predictions"""

df_new = df.sample(1)


df_new

x_new = df_new.drop(['quality'], axis = 1)


x_new = ss.fit_transform(x_new)


y_pred_new = svc.predict(x_new)


y_pred_new